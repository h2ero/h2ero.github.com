{"meta":{"title":"73404的博客","subtitle":"","description":"","author":73404,"url":"http://example.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-03-08T08:39:06.291Z","updated":"2021-03-08T08:39:06.291Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-08T08:39:06.293Z","updated":"2021-03-08T08:39:06.293Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2021-03-08T08:39:06.294Z","updated":"2021-03-08T08:39:06.294Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-03-08T08:39:06.295Z","updated":"2021-03-08T08:39:06.294Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-08T08:39:06.295Z","updated":"2021-03-08T08:39:06.295Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-03-08T08:39:06.296Z","updated":"2021-03-08T08:39:06.296Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-03-08T08:39:06.297Z","updated":"2021-03-08T08:39:06.297Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"阿里云 RocketMQ Java SDK BUG 导致 OOM 排查","slug":"2021/2021-03-08-rocketmq-oom","date":"2021-03-08T10:08:05.000Z","updated":"2021-03-08T10:52:07.296Z","comments":true,"path":"/2021/2021-03-08-rocketmq-oom.html","link":"","permalink":"http://example.com/2021/2021-03-08-rocketmq-oom.html","excerpt":"","text":"前言在现在的公司做了一个类似神策运营的计划的服务，可以针对事件配置不过规则触发不同webhook, 支持常用的运算，逻辑运算，正则匹配。减少非常多的业务代码。 事故发生某日业务反馈某一事件有50%左右没有被触发。于是开始介入排查。 消息轨迹从上游服务拿到问题的用户发送RocketMQ的Message ID，然后查询消息轨迹发现消息未被所有的下游服务消费, 消费成功需要返回CommitMessage或者ReconsumeLater才会被认为成功。难道消息丢了？不过排查其他下游访问发现有被消费的日志,和阿里云工程师确认网络环境不好的情况消息轨迹不是可靠的。 消费服务排查前一天晚上服务有发生重启, 查看了当时的k8s event log，发现当时OOM了，于是找运维导出现场日志文件。 OOM时候的JVM 的 heap profile 文件。 Java GC LOG 导出的heap文件导入jvisualvm中，查看， 基本信息栏便会有关键信息。 123456789字节总数: 1,071,951,371 类总数: 12,250 实例总数: 1,814,536 类加载器: 59 垃圾回收根节点: 3,264 等待结束的暂挂对象数: 0 在出现 OutOfMemoryError 异常错误时进行了堆转储 导致 OutOfMemoryError 异常错误的线程: NettyClientPublicExecutor_2 1234567891011121314151617&quot;NettyClientPublicExecutor_2&quot; prio&#x3D;5 tid&#x3D;84 RUNNABLE at java.lang.OutOfMemoryError.&lt;init&gt;(OutOfMemoryError.java:48) at java.util.Arrays.copyOf(Arrays.java:3236) Local Variable: byte[]#3043 at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:118) at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:93) at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:153) at com.aliyun.openservices.shade.com.alibaba.rocketmq.common.UtilAll.uncompress(UtilAll.java:267) Local Variable: byte[]#3042 Local Variable: java.io.ByteArrayInputStream#1 Local Variable: java.util.zip.InflaterInputStream#1 at com.aliyun.openservices.shade.com.alibaba.rocketmq.common.message.MessageDecoder.decode(MessageDecoder.java:348) Local Variable: com.aliyun.openservices.shade.com.alibaba.rocketmq.common.message.MessageClientExt#3014 at com.aliyun.openservices.shade.com.alibaba.rocketmq.common.message.MessageDecoder.decode(MessageDecoder.java:258) at com.aliyun.openservices.shade.com.alibaba.rocketmq.common.message.MessageDecoder.decodesBatch(MessageDecoder.java:398) Local Variable: java.nio.HeapByteBuffer#1 Local Variable: java.util.ArrayList#2742 SDK代码触发的OOM, 同时按内存占用大小排序堆类数据，前面的都为Java语言自带的类型，在业务代码中并没有过多的使用，第一个最大的类为阿里云SDK的。 123456byte[] 1.6691870538804412 30,288 (1.7%) 988,850,651 (92.2%)char[] 25.22468553944369 457,711 (25.2%) 26,832,864 (2.5%)java.lang.String 25.208207497674334 457,412 (25.2%) 12,807,536 (1.2%)java.util.HashMap$Node 11.836855262171706 214,784 (11.8%) 9,450,496 (0.9%)java.util.HashMap$Node[] 1.3297063271271554 24,128 (1.3%) 3,767,424 (0.4%)com.aliyun.openservices.shade.com.alibaba.rocketmq.common.message.MessageClientExt 1.110752280472804 20,155 (1.1%) 2,741,080 (0.3%) 于是找阿里云企业客服介入, 排查过程反反复复了好几次，答复是没有解释为什么MessageClientExt占用为什么这么大的问题。不过沟通的过程中了解了RocketMQ一些基本的概念。业务代码中取消息是拉模式, 1客户端本地缓存的的消息数 &#x3D; Min (MaxCachedMessageAmount , MaxCachedMessageSizeInMiB, pullThresholdForQueue\\*队列数) 官方文档解释为 12maxCachedMessageAmount 客户端本地的最大缓存消息数据，默认值：1000，单位：条。maxCachedMessageSizeInMiB 客户端本地的最大缓存消息大小，取值范围：16 MB~2 GB，默认值：512 MB。 排查SDK代码阿里云企业客服解决不了于是拉了SDK的维护研发进群参与讨论，不过也没有解决问题。最后打开SDK，设置断点一步步调试SDK代码，最终发现MaxCachedMessageAmount , MaxCachedMessageSizeInMiB默认值并没有生效。问题代码如下。 12345678910111213141516171819202122232425262728public class ONSConsumerAbstract extends ONSClientAbstract &#123; &#x2F;** 默认值限制为5000条 *&#x2F; &#x2F;** * Consumer允许在客户端中缓存的最大消息容量，默认值为512 MiB，设置过大可能会引起客户端OOM，取值范围为[16, 2048] * &lt;p&gt; * 考虑到批量拉取，实际最大缓存量会少量超过限定值 * &lt;p&gt; * 该限制在客户端级别生效，限定额会平均分配到订阅的Topic上，比如限制为1000MiB，订阅2个Topic，每个Topic将限制缓存500MiB *&#x2F; private int maxCachedMessageAmount &#x3D; 5000; public ONSConsumerAbstract(final Properties properties) &#123; String configuredCachedMessageSizeInMiB &#x3D; properties.getProperty(PropertyKeyConst.MaxCachedMessageSizeInMiB); String configuredCachedMessageAmount &#x3D; properties.getProperty(PropertyKeyConst.MaxCachedMessageAmount); if (!UtilAll.isBlank(configuredCachedMessageAmount)) &#123; maxCachedMessageAmount &#x3D; Math.min(MAX_CACHED_MESSAGE_AMOUNT, Integer.valueOf(configuredCachedMessageAmount)); maxCachedMessageAmount &#x3D; Math.max(MIN_CACHED_MESSAGE_AMOUNT, maxCachedMessageAmount); &#x2F;&#x2F; 这个设置的后面并没有设置， 移到下一行即可。 this.defaultMQPushConsumer.setPullThresholdForTopic(maxCachedMessageAmount); &#125; &#125; 解决问题和官方SDK研发确认，确实有BUG, 最后走到了pullThresholdForQueue*队列数这个默认值，不过队列数线上设置的很大，所以最后导致堆积消息量太大，于是业务代码里面手动设置了下该值，上线内存占用500M左右，高峰期没有再出现问题。 1properties.put(PropertyKeyConst.MaxCachedMessageAmount, 100); 为什么20000条就OOM因为上游系统消息体实在太大了！！！所有东西都给塞了进去，而不是传一个ID。单个消息体达到了32K，线上JVM参数 -Xms1024m,-Xmx1024m, k8s配置也不是太合理， 12345678910&quot;resources&quot;: &#123; &quot;limits&quot;: &#123; &quot;cpu&quot;: &quot;1&quot;, &quot;memory&quot;: &quot;1024Mi&quot; &#125;, &quot;requests&quot;: &#123; &quot;cpu&quot;: &quot;100m&quot;, &quot;memory&quot;: &quot;200Mi&quot; &#125; 比较合理的是将request设置大一点。 Rocket MQ 好用的一些特性 延时消息 事务 消息轨迹 顺序消息，（相同队列顺序和全局顺序） 重置消费位点 使用注意点 队列分配问题，队列比消费客户端少，会有客户端不消费消息，或者客户端分配队列数不一样的情况。 消息可能会消费多次，需要做幂等。 同一个客户端使用同一个group id消费一个topic会漏消息。 阿里云消息队列RocketMQ帮助文档: https://help.aliyun.com/product/29530.html","categories":[],"tags":[]},{"title":"2014年","slug":"2015/2015-01-01","date":"2014-12-31T16:00:00.000Z","updated":"2021-03-08T09:09:42.655Z","comments":true,"path":"/2015/2015-01-01.html","link":"","permalink":"http://example.com/2015/2015-01-01.html","excerpt":"","text":"又过一年, 早早总结下2014, 开始新的. 出来不知不觉都2,3年. 生活前面有点颓废, 连饭都没有怎麽弄, 天天在外边吃. 书也没有怎麽看.最近才开始看看书, 又开始弄饭, 一个周平均5天会去健身房.今年要努力变为肌肉男, 否则就辜负了每天的鸡蛋, 乳清蛋白, 肉类.锻炼身体坚持就行, 剩下的就是时间问题了. 加上骑行比较多,最远一次去了巴郎山, 没有到达哑口, 只是到了邓生, 然后因为在外边还是挑食,没有吃好, 到了那儿就已经没有体力了, 恰巧遇到其他人就去邓生沟徒步去了.映秀到卧龙的路太烂太烂好多时候都是靠意志在坚持.骑行把自己的心境又提高了一大截. 下坡最大速度接近60km/h,过后都觉得自己不会再用这麽大的速度, 对生命也更加珍惜. 去年买了太多的东西, 小到电动牙刷, 万用表, 大到微波炉, 烤箱.入的树莓派都没有怎麽折腾, 恒温焊台都没有怎麽用.以后要稍微控制下购买欲.今年可能就只入一个Macbooke Air吧, 电脑用了太久跑不太动了,手机也太卡最近也换了个中兴的z7 mini. 还有不想吐槽自己买的那一大堆调料了,还好有用心弄过饭. 又没有牵过一个女生的手, 今年还是该干啥干啥! 工作工作没有啥变化, 做该做的事情, 踩了太多坑, 不过就是这样才成长了太多.认识了很多人, 不过大多数都来去匆匆.觉得自己搞IT每天敲的都比较high. 而且每天都有学到东西, 每天都在进步.也在影响其他的人. 算是有实现自己的价值吧. 愿景 一个周坚持5天去健身房, 努力再变壮点 每天拿一个小时看看书 好好做菜, 学几个拿的出手的大菜 努力挣钱早日买房 找个妹子!!!","categories":[],"tags":[]},{"title":"最近一年","slug":"2014/2014-05-16","date":"2014-05-15T16:00:00.000Z","updated":"2021-03-08T09:20:50.554Z","comments":true,"path":"/2014/2014-05-16.html","link":"","permalink":"http://example.com/2014/2014-05-16.html","excerpt":"","text":"一年没有更新博客。 一来都是在用自己写的mwiki在vim里面用Markdown来记笔记。没有啥好写。年初的时候计划写2013年的年终总结也没有写。二来离开matchmove后进入新东家,这一年多又经历一次从感觉太弱到变强大的过程。很多时候都敲代码都敲到手疼,现在自己对自己的要求是变的有趣就行。前几天折腾了下jekyll换到了hexo这个nodejs写的静态博客系统上面，感觉比jekyll友好太多,以后就用这个折腾了。会经常更新。 折腾 健身, 累计的时间可能也就半年， 收获蛮大， 最近都没有怎麽去，要多用时间学习， 还有身体比较好，因为天天都在蹬自行车。 骑行，去年下半年搞了辆捷安特ATX 770, 码表上显示总里程1kkm, Vmax 54km/h。连续时长最长7小时， 120km，被晒的来脱皮了。成都空气太差, 骑行车呼吸不爽。 炒菜做饭， 马上一个人单独居住两年, 做菜觉得比80%的人好吃。一个人做饭吃饭消化，现在都成为个胖子，75kg，最近看到太多胖子病太多的微博，努力在控制体重。 dotfiles， 各种配置已经被折腾来现在都不知道咋样才能提高效率了， 从firefox(pentadactyl), vim, awesome wm, zsh, emacs, urxvt。把最常用的软件90%的操作都vim化， 总之被其他人看一眼就知道这人在装b。 语言， Lua， VimL， Golang 主要就折腾这三个， 最后一个是工作需要， 前两个是为了配置。最近从头折腾C。 其他， Shell(主要是高冷艳的命令)，OpenWRT(玩了两下， 发现网络环境和硬件受限没法好好玩). 理发器，寸头自己来。 追了太多美剧， 太多鸡血，太多的热血。送走了《斯巴达克斯》,《绝命毒师》 未来一两年都把精力放到算法数据和Linux开发上, 往底层走走。现在做PHP, 前端都找不到新鲜感了。 成长 工作中踩过一次坑以后， 思考更加全面， 心里再没有有过没有底的感觉。 半成熟，行为举止越来越接近真实的自己。没有啥解不开心结。至于那些开心的， 不开心的往事都只能放在心底最冷，最热的地方，不会去想， 不去忘记。","categories":[],"tags":[]},{"title":"PHP编码规范及Vim PHP 代码格式化实现","slug":"2013/2013-01-29-vim-php-code-format-and-php-convention-code-style","date":"2013-01-28T16:00:00.000Z","updated":"2021-03-08T09:19:28.547Z","comments":true,"path":"/2013/2013-01-29-vim-php-code-format-and-php-convention-code-style.html","link":"","permalink":"http://example.com/2013/2013-01-29-vim-php-code-format-and-php-convention-code-style.html","excerpt":"","text":"最近对Vim进行各种折腾，现在又上了一层。敲PHP总是有很多地方要空格隔开。所以按照Kohana文档中的编程规范来写了个脚本。写这个脚本把Vim的正则表达式用的非常熟了。功能简单就是加最简单的空格。主要还是用在自己敲代码的时候。基本上的类型就是下面这些了。 ###格式化类型 12345678910111213141516171819202122232425262728293031323334&lt;?php &#x2F;&#x2F;判断if($foo&#x3D;&#x3D;&#39;bar&#39;) if ($foo &#x3D;&#x3D; &#39;bar&#39;)&#x2F;&#x2F;赋值$foo&#x3D;&#39;bar&#39;;$foo &#x3D; &#39;bar&#39;;&#x2F;&#x2F;否定if (!$foo)if ( ! $foo)&#x2F;&#x2F;三元加其他运算符$foo&#x3D;(($bar&gt;5)?($bar+$foo):strlen($bar))?Help::$foo%5:$bar%7;$foo &#x3D; (($bar&gt;5) ? ($bar + $foo) : strlen($bar)) ? Hleper::$foo % 5 : $bar % 7;&#x2F;&#x2F;强制转换$foo&#x3D;(string)$bar;$foo &#x3D; (string) $bar;&#x2F;&#x2F;判断内有强制转换if((string)$bar)if ( (string) $bar)&#x2F;&#x2F;括号中有,preg_replace(&#39;&#x2F;(\\d+) dollar&#x2F;&#39;,&#39;$1 euro&#39;,$str);preg_replace(&#39;&#x2F;(\\d+) dollar&#x2F;&#39;, &#39;$1 euro&#39;, $str);&#x2F;&#x2F;条件符号if(($foo&amp;&amp;$bar)||($b&amp;&amp;$c))if (($foo &amp;&amp; $bar) || ($b &amp;&amp; $c))&#x2F;&#x2F;数组$arr&#x3D;array(&#39;key&#39;&#x3D;&gt;array(&#39;key&#39;&#x3D;&gt;&#39;value&#39;+&#39;value2&#39;))$arr &#x3D; array(&#39;key&#39; &#x3D;&gt; array(&#39;key&#39; &#x3D;&gt; &#39;value&#39; + &#39;value2&#39;))&#x2F;&#x2F;运算符$a+&#x3D;$b&#x2F;$c-$d;$a +&#x3D; $b &#x2F; $c - $d;&#x2F;&#x2F;逻辑英文操作符if(1and2or3xor4)if (1 AND 2 OR 3 XOR 4) ###难点 整个脚本用了了10多条正则，用到了正则中的环视和贪婪。不支持这两个特性的正则都是不完美的。 对于字符串中有转义又有要替换的情况，如“h2ero=h2eros &quot;##&quot;##”格式化的时候会将引号中的要替换的类型都给替换掉，如果要排除这些的话需要在10多条正则中都添加，解决是先匹配处是字符串的类型然后替换为STR0，STR1等，并保存到list里面。然后在所有类型替换完后在替换回去,这是最难的地方。 要格式化是在每一次回车的时候继续格式化，也就是说边敲边格式化。不过vim正则替换完后都是会改变光标的位置，然后回车就失效了。解决是先执行回车保留本来的行为，然后在取上一行进行替换。 转义’这个是第一个问题中遇到的一个问题。当pattern为’regex’的时候regex里面包含有‘的话需要使用两个’‘进行转义而不是\\’。 Vim正则语法比较难，不过正则思想都一样。 ###使用 没有写为插件的形式，直接复制下面代码保存。然后在.vimrc中添加以下代码:source ~/.vim/script/phpformat.vim 最后一行只会对php文件生效。然后每次敲完一行代码回车就会格式化好。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&quot;format code&quot;http:&#x2F;&#x2F;kohanaframework.org&#x2F;3.3&#x2F;guide&#x2F;kohana&#x2F;conventionsfunc! Add_space() let now_line &#x3D; line(&#39;.&#39;) &quot;exec &quot;inoremap &lt;CR&gt; &lt;CR&gt;&quot; exec &quot;normal! a\\&lt;CR&gt;\\&lt;Esc&gt;&quot; let n_line &#x3D; getline(now_line) &quot; str replace let strlist &#x3D; [] let flag &#x3D; 0 let index&#x3D; 0 while flag &#x3D;&#x3D; 0 let replacelist &#x3D; matchlist(n_line, &#39;\\([&#39;&#39;&quot;]\\)\\&#123;1&#125;\\(.\\&#123;-&#125;\\)\\\\\\@&lt;!\\1\\&#123;1&#125;&#39;) if len(replacelist) &#x3D;&#x3D; 0 let flag &#x3D; 1 else let rstr &#x3D; replacelist[1].replacelist[2].replacelist[1] call add(strlist,[&#39;STR&#39;.index,rstr]) let n_line &#x3D; substitute(n_line,rstr,&#39;STR&#39;.index,&#39;&#39;) let index+&#x3D;1 endif endwhile &quot; 1. &#x3D;+*&lt;-%&#x2F; exclude &#x3D;&gt; !&#x3D; !&#x3D;&#x3D; .&#x3D; +&#x3D; &lt;&#x3D; let n_line &#x3D; substitute(n_line,&#39;\\s*\\(!\\|!&#x3D;\\|+&#x3D;\\|&lt;&#x3D;\\|\\.\\)\\@&lt;!\\([%&#x2F;&#x3D;*+&lt;-]\\+[&gt;]\\@!\\)\\s*&#39;,&#39; \\2 &#39;,&#39;g&#39;) &quot; 2. , eg : array(&#39;a&#39; &#x3D;&gt; &#39;b&#39;, &#39;c&#39; &#x3D;&gt; &#39;d&#39;) let n_line &#x3D; substitute(n_line,&#39;\\s*\\([,]\\+\\)\\s*&#39;,&#39;\\1 &#39;,&#39;g&#39;) &quot; 3. () eg : if ( $foo ) exclude define(&#39;&#39;) let n_line &#x3D; substitute(n_line,&#39;\\(if\\|for\\|foreach\\|switch\\)\\@&lt;&#x3D;\\s*\\([(]\\+\\)\\(.\\&#123;-&#125;\\)\\([)]\\+\\)\\s*&#39;,&#39; \\2\\3\\4 &#39;,&#39;g&#39;) &quot; 4. &#x3D;&gt; eg : array(&#39;a&#39; &#x3D;&gt; &#39;b&#39;, &#39;c&#39; &#x3D;&gt; &#39;d&#39;) let n_line &#x3D; substitute(n_line,&#39;\\s*\\(&#x3D;&gt;\\)\\s*&#39;,&#39; \\1 &#39;,&#39;g&#39;) &quot; 5. + - * &#x2F; exclude ++ -- &quot;let n_line &#x3D; substitute(n_line,&#39;\\s*\\([-]\\&#123;2,&#125;\\)\\s*&#39;,&#39;\\1&#39;,&#39;g&#39;) &quot; 6. !&#x3D; !&#x3D;&#x3D; +&#x3D; .&#x3D; eg : if ($foo !&#x3D;&#x3D; FALSE) $a +&#x3D; 5; let n_line &#x3D; substitute(n_line,&#39;\\s*\\(!&#x3D;\\+\\|+&#x3D;\\|\\.&#x3D;\\|&lt;&#x3D;\\)\\s*&#39;,&#39; \\1 &#39;,&#39;g&#39;) &quot; 7. (! eg : if ( ! $foo) let n_line &#x3D; substitute(n_line,&#39;\\s*[(]\\@&lt;&#x3D;\\(!\\)\\s*&#39;,&#39; \\1 &#39;,&#39;g&#39;) &quot; 8. || &amp;&amp; eg : if (($foo &amp;&amp; $bar) || ($b &amp;&amp; $c)) let n_line &#x3D; substitute(n_line,&#39;\\s*\\(&amp;&amp;\\|||\\)\\s*&#39;,&#39; \\1 &#39;,&#39;g&#39;) &quot; 9. (int) eg : if ( (int) $foo) in up regex will replace it like if((int) $foo), follow will fix it. let n_line &#x3D; substitute(n_line,&#39;\\s*(\\(int\\|bool\\|float\\|string\\|binary\\|array\\|object\\|unset\\))\\s*&#39;,&#39; (\\1) &#39;,&#39;g&#39;) &quot; 10. ?: eg : $foo &#x3D; $bar ? $foo : $bar; let n_line &#x3D; substitute(n_line,&#39;\\s*\\(?\\)\\s*\\(.\\&#123;-&#125;\\)\\s*\\(:\\)\\s*&#39;,&#39; \\1 \\2 \\3 &#39;,&#39;g&#39;) &quot; 11. for(;;) eg : for($i &#x3D; 0; $i &lt; 100; $i++) let n_line &#x3D; substitute(n_line,&#39;\\(for\\s(\\)\\@&lt;&#x3D;\\([^;]*\\)\\(;\\)\\([^;]*\\)\\(;\\)&#39;,&#39;\\2\\3 \\4\\5 &#39;,&#39;g&#39;) &quot;let n_line &#x3D; substitute(n_line,&#39;\\s*\\(for(\\)\\@&lt;&#x3D;.*\\s*\\(;\\).*\\s*&#39;,&#39;\\2 &#39;,&#39;g&#39;) &quot;let n_line&#x3D;substitute(n_line,&#39;\\s*\\([&#x3D;+]\\+\\)\\s*&#39;,&#39; \\1 &#39;,&#39;g&#39;) &quot; str restore let index &#x3D; len(strlist) - 1 while len(strlist) &gt; 0 let n_line &#x3D; substitute(n_line,strlist[index][0],strlist[index][1],&#39;&#39;) unlet strlist[index] let index-&#x3D;1 endwhile call setline(now_line,n_line) &quot;exec now_line.&quot;s&#x2F;\\\\\\s*\\\\\\([&#x3D;+]\\\\\\+\\\\\\)\\\\\\s*&#x2F; \\\\1 &#x2F;ge&quot; &quot;exec &quot;inoremap &lt;CR&gt; &lt;Esc&gt;:call Add_space()&lt;CR&gt;&quot;endfuncfunc! PHP_space() let now_line &#x3D; line( &#39;.&#39; ) let n_line &#x3D; getline(now_line) let html &#x3D; matchstr(n_line, &#39;^\\s*[&lt;.#]&#39;) if empty(html) call Add_space() else exec &quot;normal! \\&lt;ESC&gt;a\\&lt;CR&gt;&quot; echo &quot;this is html&quot; &quot;throw &quot;no url recognized into &#96;&#96;&quot;.n_line.&quot;&#39;&#39;&quot; endifendfunc&quot;:inoremap &lt;CR&gt; &lt;Esc&gt;:call Add_space()&lt;CR&gt;&quot;inoremap &lt;CR&gt; &lt;Esc&gt;:call Add_space()&lt;CR&gt;au FileType php inoremap &lt;CR&gt; &lt;Esc&gt;:call PHP_space()&lt;CR&gt; ###PHP编程规范 整理来着网上和kohana，zend framework框架的编程约定代码规范。 123456789101112131415161718192021222324252627282930&lt;?php&#x2F;&#x2F;一般变量 形容词_名词,变量范围正则[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*$new_payment&#x2F;&#x2F;函数&#x2F;方法 动词+名词，函数方法空行隔开get_username()&#x2F;&#x2F;多参数加空格get_message($id, $count, $date)&#x2F;&#x2F;语法关键字后加空格if ($foo)&#x2F;&#x2F;函数括号后不加空格strlen(&#39;h2ero&#39;)&#x2F;&#x2F;花括号if ($foo)&#123; &#125;&#x2F;&#x2F;SQL关键词大写$sql &#x3D; &quot;h2ero&quot;&#x2F;&#x2F;类型转换空格$foo &#x3D; (string) $foo;&#x2F;&#x2F;变量在前，真假在后if ($foo !&#x3D;&#x3D; FALSE)&#x2F;&#x2F;使用AND，OR代替&amp;&amp; ||if (($foo AND $bar) OR ($b AND $c))&#x2F;&#x2F;实例化$db &#x3D; new Database;&#x2F;&#x2F;而不是,除了有构造方法的情况。$db &#x3D; new Database();&#x2F;&#x2F;其他情况if ( ! $foo)","categories":[],"tags":[]},{"title":"2012年","slug":"2013/2013-01-24-2012","date":"2013-01-23T16:00:00.000Z","updated":"2021-03-08T07:28:19.147Z","comments":true,"path":"/2013/2013-01-24-2012.html","link":"","permalink":"http://example.com/2013/2013-01-24-2012.html","excerpt":"","text":"##2012 碎碎念2012过去快一个月了，说好的总结现在才开始写。2012在学校里面呆了一学期，基本上都是乖乖的去上课，因为不想挂科。上课的时候也差不多是在看借的和买的书，还没有考试就闲不下来出去找工作去了。然后请假考试，因为学校都是要停一个月的课。剩下的7个月都在外边，第一份工作每天回学校第二份在外边租了房子，不过大多数都是一个人呆着。这一年学了很多东西，各种折腾，最近一次折腾下Openwrt折腾了一天没有折腾好，感觉没有以前那种激情了。可能时间不够了。我想这句话比较适合现在的自己吧，too young too simple sometime naive。 ###做好的 学分修完了。 搬出学校一个人生活了，当然基本上都是吃自己弄的了。 linux,php,vim,git常用的开发工具软件语言都能用上手了，不枉那些年为戒游戏和QQ装的ubuntu单系统，年尾看正则现在vim里面正则用着那叫一个爽，还看了看vimL，然后看的那本shell的书也给自己带来了很多的东西。 看了一些书，在学校每周也有去图书馆借新书，学的东西有点点泛。 认识了很多朋友给自己带来了不少的激情，也让自己很多想法改变了很多。看着同事们都活的蛮开心觉得自己也会有个不错的未来。 PHP单独说下，在MatchMove也算见识到PHP比较NB的用法了，主要是Kohana里面的一些东西，还有譬如namespace等。MatchMove什么都是用的自己熟悉的总之还是蛮享受这四个月的工作时间，不过因为自己太浮躁静不下心来最终决定离开。挺对不住fancy和KJ的。 ###挚爱 生命这是那样，自己要珍惜自己才可以让其他人不担心自己。身边的人都生病，外婆病了一年，年纪太大了。老爸老妈也病了，不过都好了。有的时候就觉的时间太短了，要做的事情太多。晃眼一看身边的人都老了，朋友们都各忙各的，没有谁还有那么多的时间了。 ##2013 ###计划 锻炼好身体 消灭完买的书 多混社区 待心安静下来了再找份安定的工作 找个能手牵手一起走女朋友 把FuelPHP的代码给看了 弄编译原理和算法 多参加社会活动 语言继续python打算学学lua 认真写部落格，坚决不再删微博。 System Version: OS X 10.8 (12A269) Kernel Version: Darwin 12.0.0 2013-01-24 14:49:46","categories":[],"tags":[]},{"title":"出来半年啦","slug":"2013/2013-05-04-latest","date":"2013-01-23T16:00:00.000Z","updated":"2021-03-08T09:14:35.226Z","comments":true,"path":"/2013/2013-05-04-latest.html","link":"","permalink":"http://example.com/2013/2013-05-04-latest.html","excerpt":"","text":"缴了半年的房租，缴了一个季度的VPS，又成为穷光蛋了。太久没有更新博客,以后基本上不更新什么技术文章了。因为学的东西都用vimwiki记录去了，除了一些不适合用vimwiki记的。在线的页面在http://blog.h2ero.cn/wiki。除了语法和markdown不一样因为其他都挺舒服。离开matchmove来到新公司也快两个月了。最近自己也在照着其他的框架写自己的框架。想实现些自己的东西。 主要就这些特点： * HMVC * Cascading Filesystem * Namespace * i18n * 代码规范PSR * 依赖管理Composer `其他的东西都不准备自己写,都用别人写好的。而且很多比自己写的都要好，这也是Composer也是如此流行的原因，PHP会变越好的。除了天天PHP就是天天泡在github上面了，现在已经重度依赖了。不得不感叹github为程序员带来了太多的东西，才两个月vim扩展增加到了40+，其实觉得Vimscript也不是想象中那么不好。自己想写也找不到什么插件可写，Firefox也是。囧敲了一半误删除修改还要优Gundo这个扩展给回退回去。今天才知道CtrlP支持写扩展，觉得自己还是不够认真，所以一直以来都没有发现。今天逛别人的repo才发现。比如你可以用CtrlP弄了搜索分支切换分支的扩展。特别是在团队开发中分支特别多，想CtrlP这样搜索切换岂不是很舒服。具体可以看https://github.com/kien/ctrlp.vim/tree/extensions 。重读vim手册也在毕业后的计划中。觉得还是vim-jp活跃，国人都忙着养家糊口去了。不碎碎念了，弄毕业设计去。没有妹子的晚上只能面对电脑。","categories":[],"tags":[]},{"title":"为Youtube播放事件添加Google Analytics统计","slug":"2012/2012-12-18-YouTube_Google_Analytics","date":"2012-12-17T16:00:00.000Z","updated":"2021-03-08T07:25:14.997Z","comments":true,"path":"/2012/2012-12-18-YouTube_Google_Analytics.html","link":"","permalink":"http://example.com/2012/2012-12-18-YouTube_Google_Analytics.html","excerpt":"","text":"Google Analytics太过于强大，才发现国内的什么CNZZ,51la,百度统计等都弱爆。单单是 Dimensions &amp; Metrics就可以满足对网站各种不同的数据分析。以前都不明白为什么很多外国的官方网站都放Youtube的视频，原来Youtube提供的API也非常强大。可惜这些好产品在国内都不能用。不过做个英文站这些都会用到。要统计Youtube的播放及其他事件需要参照IFrame embeds using the IFrame Player API 123456789101112131415161718192021222324252627&#x2F;&#x2F;先在页面添加div#playervar tag &#x3D; document.createElement(&#39;script&#39;);tag.src &#x3D; &quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;player_api&quot;;var firstScriptTag &#x3D; document.getElementsByTagName(&#39;script&#39;)[0];firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);var player;function onYouTubePlayerAPIReady() &#123; player &#x3D; new YT.Player(&#39;player&#39;, &#123; height: &#39;390&#39;, width: &#39;640&#39;, videoId: &#39;zLQFkztsozw&#39;, events: &#123; &#39;onReady&#39;: onPlayerReady, &#39;onStateChange&#39;: onPlayerStateChange &#125; &#125;);&#125;function onPlayerStateChange(event) &#123; if(event.data &#x3D;&#x3D; YT.PlayerState.PLAYING) &#123; _gaq.push([&#39;_trackEvent&#39;, &#39;Videos&#39;, &#39;Play&#39;, player.getVideoUrl()]); &#125; if(event.data &#x3D;&#x3D; YT.PlayerState.ENDED) &#123; _gaq.push([&#39;_trackEvent&#39;, &#39;Videos&#39;, &#39;Watch to End&#39;, player.getVideoUrl()]); &#125;&#125;tag.onload &#x3D; onYouTubePlayerAPIReady(); 然后就可以在Google Analytics里面看到。 Event Category Event Action total event unique event Videos Play 90 85 Videos Watched to End 30 30","categories":[{"name":"wiki","slug":"wiki","permalink":"http://example.com/categories/wiki/"}],"tags":[{"name":"Youtube GoogleAnalytics","slug":"Youtube-GoogleAnalytics","permalink":"http://example.com/tags/Youtube-GoogleAnalytics/"}]},{"title":"各搜索引擎header信息","slug":"2012/2012-12-09-spider","date":"2012-12-08T16:00:00.000Z","updated":"2021-03-08T07:20:35.749Z","comments":true,"path":"/2012/2012-12-09-spider.html","link":"","permalink":"http://example.com/2012/2012-12-09-spider.html","excerpt":"","text":"整理了一下日志里面的爬虫信息。 baidu image: &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; baidu Transcoder;)&quot; soso: &quot;Mozilla/5.0(compatible; Sosospider/2.0; +http://help.soso.com/webspider.htm)&quot; baidu: &quot;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&quot; esou: &quot;Mozilla/5.0 (compatible; EasouSpider; +http://www.easou.com/spider.html)&quot; jike: &quot;Mozilla/5.0 (compatible; JikeSpider; +http://shoulu.jike.com/spider.html)&quot; procog: &quot;Mozilla/5.0 (compatible; ProCogBot/1.0; +http://www.procog.com/spider.html)&quot; openindex: &quot;Mozilla/5.0 (compatible; OpenindexSpider; +http://www.openindex.io/en/webmasters/spider.html)&quot; google: &quot;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot; 360: &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.0.11) Gecko/20070312 Firefox/1.5.0.11; 360Spider&quot; bing: &quot;Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)&quot;","categories":[{"name":"wiki","slug":"wiki","permalink":"http://example.com/categories/wiki/"}],"tags":[{"name":"search","slug":"search","permalink":"http://example.com/tags/search/"}]},{"title":"netbeans","slug":"2012/2012-11-29-jvi-netbeans","date":"2012-11-28T16:00:00.000Z","updated":"2021-03-08T07:20:35.716Z","comments":true,"path":"/2012/2012-11-29-jvi-netbeans.html","link":"","permalink":"http://example.com/2012/2012-11-29-jvi-netbeans.html","excerpt":"","text":"###jvi 安装jvi后不能通过右键菜单行号不能显示，:set nu解决 :w 需要回车两次，Menu&gt;Tools&gt;Options&gt;jVi&gt;Platform notice 去掉”:” command completion auto popup. 这项，这个时候没有自动补全需要按Ctrl+space,或者Ctrl+D zc zo 折叠打开函数。zM zR 全部###QuickOpener###show-path-in-title","categories":[{"name":"plugin","slug":"plugin","permalink":"http://example.com/categories/plugin/"}],"tags":[{"name":"netbens jVi plugin","slug":"netbens-jVi-plugin","permalink":"http://example.com/tags/netbens-jVi-plugin/"}]},{"title":"Mac下配置Postfix使用SMTP","slug":"2012/2012-11-25-Mac-SMTP-Postfix-enable","date":"2012-11-24T16:00:00.000Z","updated":"2021-03-08T07:20:35.689Z","comments":true,"path":"/2012/2012-11-25-Mac-SMTP-Postfix-enable.html","link":"","permalink":"http://example.com/2012/2012-11-25-Mac-SMTP-Postfix-enable.html","excerpt":"","text":"上一次弄过，然后这一次再弄又给忘了，苦逼周末还在弄公司的东西。最近书也没有怎么看，自己的代码也没有怎么敲，现在在的这家公司感觉东西也学的差不多了。公司用的发送Email用Swift mailer，Mac下SMTP需要用到Postfix这个软件，Mac自带。###配置sudo vi /System/Library/LaunchDaemons/org.postfix.master.plist在&lt;/dict&gt;加入&lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt;###启用 123456$ sudo launchctllaunchd% start org.postfix.master#测试运行没有telnet localhost 25#停止launchd% stop org.postfix.master 参考： Sending emails with PHP using Swiftmailer and SMTP on Mac OSX How to Enable Local SMTP (Postfix) on OS-X Leopard","categories":[{"name":"mac","slug":"mac","permalink":"http://example.com/categories/mac/"}],"tags":[{"name":"Postfix Mac SMTP","slug":"Postfix-Mac-SMTP","permalink":"http://example.com/tags/Postfix-Mac-SMTP/"}]},{"title":"fuelphp 备忘","slug":"2012/2012-11-25-fuelphp-multisit","date":"2012-11-24T16:00:00.000Z","updated":"2021-03-08T07:20:35.649Z","comments":true,"path":"/2012/2012-11-25-fuelphp-multisit.html","link":"","permalink":"http://example.com/2012/2012-11-25-fuelphp-multisit.html","excerpt":"","text":"来不起了，不过还是记一下。不然就忘了。FuelPHP主要和Kohana,CodeIgniter相关。很多东西都类似。支持HMVC,Cascading Filesystem,namespace。这些也许就是选他的原因了，如果什么时候kohana支持namespace了一定还是用kohana。不过暂时还不支持，fuelphp看起来还不错，不过很多都不完善，比如Cascading File System就是个悲剧。也有可能是自己没有搞懂，最近都在折腾Kohana和Fuelphp，Kohana中如果有用到module是可以直接通过路由访问的。而且不用设置路由，基于CFS直接冲module里面找。省很多东西，配置文件来说Kohana是merge，而Fuelphp是rewrite，所以有要多弄很多东西。不过各有各的好处。 module直接访问，如果一个Module继承自另外一个Module，相同的Controller/action下，kohana不用再设置,不过带来的坏处就是不需要是的时候需要通过设置url router去屏蔽，其实这样是不可控制的。而Fuelphp需要设置Url router去控制，其实对于一站点或者一module来说就那么点点Controller这样可控制性更强。 Controller_Template，kohana和fuelphp都可以设置$template，不过对于继承的kohana可以通过CFS找到，Fuelphp只能设置的时候添加’NS::template/default’来找到，总是觉得Cascading Filesystem在Fuelphp里面没有体现出来。悲剧，不过实现起来还是比较简单，修改下源码即可实现。 Config合并和覆盖看个人喜欢，比较不喜欢kohana的合并。 Fuelphp的namespace。","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"}],"tags":[{"name":"fuelphp php framework","slug":"fuelphp-php-framework","permalink":"http://example.com/tags/fuelphp-php-framework/"}]},{"title":"MySQL","slug":"wiki/2012-11-18-mysql-wiki","date":"2012-11-17T16:00:00.000Z","updated":"2021-03-08T07:20:36.139Z","comments":true,"path":"/wiki/2012-11-18-mysql-wiki.html","link":"","permalink":"http://example.com/wiki/2012-11-18-mysql-wiki.html","excerpt":"","text":"set @now=(DATE_FORMAT(NOW(),&#39;%Y-%m-%d %H:%i:%s&#39;)); INSERT INTO test VALUES (&#39;&#39;,uid, @now) ON DUPLICATE KEY update date_added=@now; 当出现uid相同的列时候执行后面的语句。 set @i=0;select (@i:=@i+1) as i from games limit 20；选择1-20 join 笛卡尔积(交叉连接),join,cross join SELECT * FROM table1 CROSS JOIN table2 SELECT * FROM table1 JOIN table2 SELECT * FROM table1,table2 内连接INNER JOIN 外连接LEFT [OUTER] JOIN,RIGHT [OUTER] JOIN USING select * from t1 join t1 on t1.id=t2.id 可以改为 select * from t1 join USING(id) having select *,sum(cash) s_cash from transaction group by uid having s_cash &gt; 20000 create table t1 select * from t2,insert into t1 select * t2; SELECT * from name where field REGEXP &#39;.*h2ero|h2ero.*&#39;; select last_insert_id() 快速导入数据 mysql&gt;show variables like &#39;max_allowed_packet&#39;; mysql&gt;show variables like &#39;net_buffer_length&#39;; $&gt;mysqldump -uroot -p matchmove_reports -e --max_allowed_packet=1048576 --net_buffer_length=2048 &gt; ~/Downloads/matchmove_reports.sql 两张表不同列导出同一日期数据 # User,Download select date,sum(Download) Download,sum(SignUp) SignUp from ( select * from (SELECT DATE(date_added) date, COUNT(id) &#39;SignUp&#39;,0 &#39;Download&#39; FROM users GROUP BY date) s union (SELECT DATE(date_added) date, 0 &#39;SignUp&#39;,COUNT(id) &#39;Download&#39; FROM `tracks` GROUP BY date) ) r group by date; 新建用户 //创建用户 mysql&gt; insert into mysql.user(Host,User,Password) values(&#39;localhost&#39;,&#39;phplamp&#39;,password(&#39;1234&#39;)); //刷新系统权限表 mysql&gt;flush privileges; mysql&gt;exit; 授权 grant select, insert, update, delete on weimei2.* to h2ero@localhost;","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"Git","slug":"wiki/2012-09-22-Git-wiki","date":"2012-09-21T16:00:00.000Z","updated":"2021-03-08T07:20:35.334Z","comments":true,"path":"/wiki/2012-09-22-Git-wiki.html","link":"","permalink":"http://example.com/wiki/2012-09-22-Git-wiki.html","excerpt":"","text":"###Git ignore .gitignore生效123git rm -r --cached .git add .git commit -m &quot;.gitignore work&quot; ###Git loggit log –oneline 和git log –pretty=oneline 前者commit id 为部分 ###Git 统计代码贡献 1234git log --shortstat --author &quot;Aviv Ben-Yosef&quot; --since &quot;2 weeks ago&quot; --until &quot;1 week ago&quot; | grep &quot;files changed&quot; | awk &#39;&#123;files+&#x3D;$1; inserted+&#x3D;$4; deleted+&#x3D;$6&#125; END &#123;print &quot;files changed&quot;, files, &quot;lines inserted:&quot;, inserted, &quot;lines deleted:&quot;, deleted&#125;&#39; ###Git tip reset –hard HEAD^后想恢复之前的提交，可以git reflog 找到提交的id然后用git cherry-pick对该ID的提交进行回访。 更改提交者信息git filter-branch -f --env-filter &quot;GIT_AUTHOR_NAME=&#39;Newname&#39;; GIT_AUTHOR_EMAIL=&#39;newemail&#39;; GIT_COMMITTER_NAME=&#39;Newname&#39;; GIT_COMMITTER_EMAIL=&#39;newemail&#39;;&quot; HEAD git contributiongit get contributor","categories":[{"name":"wiki","slug":"wiki","permalink":"http://example.com/categories/wiki/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"VIM","slug":"wiki/2012-09-04-vim-wiki","date":"2012-09-03T16:00:00.000Z","updated":"2021-03-08T07:20:36.093Z","comments":true,"path":"/wiki/2012-09-04-vim-wiki.html","link":"","permalink":"http://example.com/wiki/2012-09-04-vim-wiki.html","excerpt":"","text":"#VIM# ##编辑 ###常用C 改变改行后面部分相当于c$ci” ci’ ci( ci&lt; 同vi’== 修复行缩进C-A 递增数字 ###补全整行补全 CTRL-X CTRL-L根据当前文件里关键字补全 CTRL-X CTRL-N根据字典补全 CTRL-X CTRL-K根据同义词字典补全 CTRL-X CTRL-T根据头文件内关键字补全 CTRL-X CTRL-I根据标签补全 CTRL-X CTRL-]补全文件名 CTRL-X CTRL-F补全宏定义 CTRL-X CTRL-D补全vim命令 CTRL-X CTRL-V用户自定义补全方式 CTRL-X CTRL-U拼写建议 CTRL-X CTRL-S ##搜索 搜索当前光标位置下的单词 ##移动‘. 跳转到上一次编辑的行g; 跳转到最后一次修改的位置 ##Vim Visual Modevi{ 选中{}中间的内容,不包括{}va{ 选中{}中间内容，包括{}vi( 选中()中间内容vi&lt; 选中&lt;&gt;中间内容vi[ 选中[]中间内容vit 选中中间的内容vi” 选中””中间内容vi’ 选中”中间的内容vis 选中一个句子vib 选中一个blockviw选中一个单词vip 选中一个段落 ##其他 vim file +cmd 打开文件执行命令 vim file +123 v% 选中括号内容 g8 显示utf8编码 :set rtp 显示runtimepath :set ft=html 设置filetype ZZ :wq ZQ :q!Google","categories":[{"name":"wiki","slug":"wiki","permalink":"http://example.com/categories/wiki/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"SHELL","slug":"wiki/2012-09-01-shell-wiki","date":"2012-08-31T16:00:00.000Z","updated":"2021-03-08T07:20:36.023Z","comments":true,"path":"/wiki/2012-09-01-shell-wiki.html","link":"","permalink":"http://example.com/wiki/2012-09-01-shell-wiki.html","excerpt":"","text":"##基础知识###linux文件分类 - 一般文件 d 目录 l 符号链接文件 b 磁盘设备文件 c 字符设备文件 s Socket文件 p 连接文件 判断方式ls -l,file filename ###文件权限 三种身份 u g o 四种权限 r(read)4 w(write)2 x(execute)1 s(set user/group id|sticky bit) set user id 执行者变为文件的拥有者4755 set group id 执行者变为用户组 2755 sticky bit 只有文件拥有者才可以删除 1777 ###Login Shell/etc/passwd字段含义:帐号:x:UID:GID:用户信息:主目录:login shelleg:lightdm:x:104:111:Light Display Manager:/var/lib/lightdm:/bin/false ###配置文件 登录执行脚本及顺序 /etc/profile .bash_profile .bash_login .profile 注销 .bash_logout 执行新Shell 交互模式(interactive) .bashrc 非交互模式 /bin/bash 检查BASH_ENV /bin/sh不检查任何文件 ###括号匹配 echo l{i,o}ve cp file{,.bak} 备份文件 mkdir {1,2}/{3,4} ##Shell Script###执行 bash script.sh sh script.sh . script.sh source .bashrc 直接使配置生效 . source 都会让script.sh在父Shell中执行echo $SHLVL ps axf查看层级 ###调试 检测语法 bash -v script.sh 不执行查看程序代码 bash -n script.sh 追踪脚本执行 bash -x ##命令###内置命令 type bg bg is a shell builtin 判断内置命令 help -s 显示命令语法 eg: help -s alias alias: alias [-p] [name[=value] … ] echo -n 不换行 -e \\n等解释 cd - 返回先前目录 : 传回真值 alias ll=&#39;ls -l&#39; 重命名命令,取消alias ll=&#39;ll&#39; 或者 unalias ll unalias -a取消所有别名 umask 显示文件权限屏蔽值 创建文件时候 文件权限值=系统默认权限-umask值 set 设置Bash Shell属性 set -o vi开启vi模式，set +o vi 关闭vi模式,set -o noclobber/set -C转向输出保护存在文件 shopt 设置Bash Shell行为模式 time 指令执行耗时统计 time ls -la read 读取变量 read input 如果没有input变量，默认为$REPLY read -p &quot;please input a word:&quot; read -a arr&lt;&lt;(echo 1,2,3,6,5,4) 读取数组 IFS=&quot;:&quot;;read f1 f2 f3 f4 &lt; datafile 没有设置IFS则默认空格 read -r raw 不过滤\\ exec eval 执行命令 man -k sort 查找命令 ###命令行程序执行时候需要到$PATH中寻找 which top 在PATH找寻第一top命令所在位置 -a 找寻全部 locate my.conf 在文件索引数据库中找寻my.conf文件 date date MMDDhhmmYY调整时间 date + &quot;%d%h%m&quot; 产生指定时间格式 date -R 产生与RFC-2822兼容的时间格式 ls ls -A 与 ls -a相同但不显示 .,.. ls -F 在结果中加入标识符(*可执行文件，@软链接文件，=socket文件，|管道文件,不加则表示普通文件) cat &gt;file输入内容CTRL+D编辑保存文件内容到file head -n 4显示前4行内容，head -c -20不显示前面20bytes内容,tail类似 wc -c/w/l计算文件字符/单词/行 finde . -name &quot;*.txt&quot; -ctime 2 --exec rm -f &#123;&#125; \\; 找寻2天内修改过的text文件删除 tar tar -zxvf backup.tgz -C www/public 解压到指定目录 tar tvf etc.tar 显示文件内容 tar xzvf etc.tar 解压 tar zcvf etc.tar 压缩 tar rvf etc.tar re.add.file 添加 tar uvf etc.tar add.file 更新 tar Avf 1.tar 2.tar all.tar 合并 tar vf etc.tar –delete etc/hosts 删除指定文件 basename /path/filename 取filename dirname /path/filename 取path sort -nr +2 -t: /etc/passwd -t 分隔符 +2 跳过两列排序第三列 -nr 反序按数值排序(默认按ASCII) uniq file删除文件中重复的行，-d找出重复行，-c 计算重复行出现的次数 cut cut -c2-3 file 抽取第2-3个字符 cut -c9- file 抽取第9以后的 cut -c1 抽取第1个字符 cut -c-3,22- file抽取第1-3,和22以后的字符 cut -d: -f3,1 /etc/passwd 抽取paawd见3,1列 tr 转换或删除字符 tr &#39;[a-z]&#39; &#39;[A-Z]&#39; &lt; file 转换大写 tr -d k 删除字符k tr -s &#39;[a-z]&#39; &#39;[a-z]&#39; &lt;file 压缩aaa为a grep grep -Rin &quot;word&quot; */grep -Ril &quot;word&quot; * 匹配所有word显示行号，不区分大小 grep -v &quot;word&quot; * 显示不包含word eg:ps -ef | grep nautilus| grep -v &quot;grep nautilus&quot; grep -q &quot;word&quot; file 返回1/0，并放到$?这个变量中 grep -A 2 -e &#39;someone (love|like) you&#39; file 找到h2..以后显示接下来的两行 tee tee -a file=cat &gt;&gt;file文件内容Ctrl+D tee file存在清空，不存在输入然后Ctrl+D script log记录接下来命令的执行过程及结果,直到exit退出 top z切换彩色显示 关机命令 sync&amp;&amp;shutdown -h now/+30/20:00 init 0 0 关机 3 纯文本 5 图形界面 6 重新启动 poweroff -f chown root:root file chmod chmod u=rwx,g=rw file chmod a-x file ###文件操作20. touch file 建立新文件等同于 &gt; file :&gt;file21. mkdir -m 777 file22. mknod -m 666 file c/b/p n m 建立字符/区块/管道文件 主要设备代码n 次要设备代码m23. mkfifo file 建立管道文件 使用 echo “h2ero” &gt; file , cat &lt; file24. ln -sf file lnfile 删除ln再次建立25. stat file 查看文件的所有属性 + stat -c “%a%n” 单独查看文件相关属性输出 + stat -f “%a” 单独查看分区相关属性输出26. chattr +attr =attr -attr AaiD 为文件设置文件取用时间不变/只能转向开启文件进行写入/不能修改文件/不需要dump 特殊属性27. lsattr file 查看文件特殊属性28. gzip * gzip -d 解压 * gzip -c 压缩 * zcat ###历史命令 fc fc ssh 查找最近一个包含ssh fc -s ssh 查找最近一个包含ssh，并执行 历史命令扩展 !! 执行上一条 = !-1 !historyline 执行编号为historyline的指令 !-n 调用倒数第n条指令 !ssh 调用最近含有ssh的命令 !?home? 调用最近含有home的命令 ^var1^var2^ 将前一个历史命令中的var1替换为var2再执行 !# 前面输入的所有字符。ls !# 相当于执行ls ls !!:$ 前一条命令的最后一个参数=$_ !ls:1 找出最近一条以ls开头的命令的第一个参数=!ls:^ !ls:* 找出最近一天以ls开头的所有参数 !!:3-5 找出前一条3-5的参数 !!:s/var/var1/替换前1条指令中的var 为 var1 !!:h 删除后面的文件名 !!:t 删除前面的目录 !!:p 显示前一条命令但是不执行 ###执行多条命令 cmd1&amp;&amp;cmd2 cmd1执行成功cmd2才执行 cmd1||cmd2 cmd1执行失败cmd2才执行 (cmd1,cmd2,cmd3)子shell中执行 { cmd1,cmd2,cmd3 }在当前shell中执行 ##变量###数组 语法${A[index]}}，声明arr=(1 2 3 4) 所有元素$&#123;A[@]&#125;/$&#123;A[*]&#125; 长度$&#123;#A[@]&#125;/$&#123;#A[*]&#125; 赋值 arr[$&#123;#arr[*]&#125;]=2 ###取消变量 unset -v variable unset -f function ###环境变量 export -p 显示全部环境变量 declare -x LANG=&quot;en_US.UTF-8&quot; 或者 export LANG=&quot;en_US.UTF-8&quot;###Bash 内置变量 $BASH bash完整路径 $BASH_VERSION bash版本 $CDPATH cd切换搜寻目录 $HISCONTROL 控制指令是否存入历史，三个值ignorespace,ignoredups,ignoreboth， $HISTFILESIZE 行数 $HISTIGNORE export HISTIGNORE=ls:ps:cd:t*:\\&amp; HISTTIMEFORMAT=’%F%T’ 时间格式 locale 语系 $PATH 命令搜索目录 RANDOM $* 所有参数一个字符串 “arg1 arg2 arg3” $n 第n个参数 $@ 所有参数分开字符串 “arg1” “arg2” “arg3” $# 位置参数个数 $? 上一条命令传回的值1/0 成功或者失败 $$ 当前bash shell 进程标号 eg: kill $$ $_ script执行时候bash路径/bin/bash 上一条命令最后一个参数值 检查邮件时候,邮件文件名 ###变量属性 readonly readonly -p 显示所有只读属性 readonly -a/f 声明只读变量或者函数 declare declare -p | grep x 显示x变量属性 declare -p x 显示x变量属性 declare -a/f/i/r/x 声明数组/函数/整数/只读/环境变量 declare -F 显示所有的函数名称及属性 ###HEREDOC 重定向到msg文件 cat &lt;&lt;HEREDOC &gt;msg doc HEREDOC 直接输出 cat &lt;&lt;HEREDOC $USER can be used HEREDOC 直接输出不支持变量替换 cat &lt;&lt;&quot;HEREDOC&quot; $USER can&#39;t be used HEREDOC ##高级变量###分类 ${var} 变量扩展 测试存在 条件式 目的 判断条件 符合的处理方法 ${待测变量-默认值} 给不存在变量赋值 不存在 赋值 ${待测变量:-默认值} 给不存在或空值变量赋值 不存在或空值 赋值 ${待测变量:=默认值} 给空值赋值 不存在或空值 赋值 ${待测变量:?默认值} 检查变量是否完备 不存在或空值 显示变量名称:提示信息，停止执行后面的 ${待测变量:i默认值} 判断是否为真 测试存在且非空 传回默认值 记忆 : 空 测试值 - 负向 测不存在 = 设值 给空值变量设置一个默认值 ? 有问题 检查条件是否完备后再执行 - 正向 测试存在 + 取字符串 | $&#123;var:start&#125; | 指定位置截取到最后 | |------------------|--------------------------| | $&#123;var:start:len&#125; | 指定位置截取len个 | | $&#123;#var&#125; | 变量字符长度 | | $&#123;#var[@]&#125; | 数组元素个数 | | $&#123;#var[\\*]&#125; | 数组元素个数 | | $&#123;var:start:len&#125; | 指定位置截取len个 | | $&#123;@:start&#125; | 指定位置截取到最后的参数 | | $&#123;@:start:count&#125; | 指定位置截取到最后的参数 | + 对比 | $&#123;var#tpl&#125; | 由前面对比删除最短 | |-------------|--------------------| | $&#123;var##tpl&#125; | 由前面对比删除最长 | | $&#123;var%tpl&#125; | 由后面对比删除最短 | | $&#123;var%%tpl&#125; | 由后面对比删除最长 | + 修改 若不加/str则为删除，替换为空 | 1 | $&#123;var/tpl/str&#125; | 替换地一个符tpl的 | |---|-----------------|--------------------| | 2 | $&#123;var//tpl/str&#125; | 替换地全部符合tpl的| | 3 | $&#123;var#tpl/str&#125; | 同1，由开始替换 | | 4 | $&#123;var#tpl/str&#125; | 同2，由开始替换 | + 取变量 1. $&#123;!var@&#125; 或者 `$&#123;!var*&#125;` 去所有一var开头的变量名称 2. $&#123;!arr[@]&#125; 或者 `$&#123;!arr[*]&#125;` 取所有数组索引 $(cmd) 或者 cmd 命令扩展 算术扩展 $((exp)) expr exp $[exp] ##流程控制 if cmd1&amp;&amp;cmd2 也可当做if用 if-then if condition;then cmd fi if-then-else if condition;then cmd else cmd fi if-then-elif-then-else if condition;then cmd elif condition;then else cmd fi 条件 执行命令返回的结果，eg: grep -q ^h2ero$ filename [[ ]] eg: [[ str &gt; xyz ]] test eg: test “str”&gt;“xyz” eg:[ “str”&gt;“xyz” ] , [ -f dir/file ] case 如果shopt -s extglob 则开启高级样式 case testitem in j|k|l) cmd;; esac for for i in arr do cmd done for ((i=1;i&lt;10;i++)) do cmd done while or until while condition do cmd done 死循环 while ((1))|true|: for(;1;) do cmd done select select s in arr do $REPLY $f done eg: select i in $(ls ../) do if [ $REPLY==&#39;q&#39; ];then kill -INT $$ fi done ##转向###默认文件代码(file descriptor) stdin 0 stdout 1 stderr 2 ###文件代码操作 fileDescriptor&lt;&gt;file 打开文件 fileDescriptor&lt;&amp;- 关闭文件 fileDescriptor&gt;&amp;- 关闭转向输出文件 n&lt;&amp;m 复制转向输入的文件代码m存为n,使n连接到m n&gt;&amp;m 复制转向输出的文件代码m存为n,使n连接到m &gt;| 忽略noclobber直接覆盖 eg:exec 6 &lt; file ;cat &lt;&amp;6 ##系统信号 kill -l/trap -l显示使用系统信号 kill kill -信号id/名 PID 或者 kill -s 信号 PID kill -HUP PID 重启进程，若是daemon就重新读取系统配置。 CTRL+C 发出INT信号。 trap trap &quot;echo &#39;kill this ?&#39;&quot; INT 注册INT信号 trap - INT 取消注册INT信号 trap &#39;&#39; INT 忽略INT信号 trap -p 显示全部注册信号 ##进程 进程字段|USER|PID|%CUP|%MEN|VSZ|RSS|TTY|STAT|START|TIME|COMMAND| 进程NI(nice) 值，NI值越大，优先度越小。 nice -n num runapp renice num -p PID -g GROUP -u USER 为指定进程/群组/用户调整NI值 ###工作控制 Ctrl+Z暂停执行程序，bg后台执行。 jobs -l 查看执行程序,%% 或者 %+调用当前程序，%- 调用前一个。%n调用编号为n的程序等同fg %n,后台执行%n&amp;或者bg %n ##用户管理 建立帐号 adduser h2ero useradd -D 显示创建用户时候的默认配置，/etc/default/useradd deluser/userdle username ~目录保存 ##其他 添加字符集 cat /usr/share/i18n/SUPPORTED vim /var/lib/locales/supported.d/local dpkg-reconfigure --force locales 目录转换 export LANG=en_US xdg-user-dirs-gtk-update export LANG=zh_CN","categories":[{"name":"wiki","slug":"wiki","permalink":"http://example.com/categories/wiki/"}],"tags":[{"name":"shell terminator","slug":"shell-terminator","permalink":"http://example.com/tags/shell-terminator/"}]},{"title":"linux vsftpd添加用户","slug":"2012/2012-08-27-ubuntu-vsftp-add-user","date":"2012-08-26T16:00:00.000Z","updated":"2021-03-08T07:20:35.613Z","comments":true,"path":"/2012/2012-08-27-ubuntu-vsftp-add-user.html","link":"","permalink":"http://example.com/2012/2012-08-27-ubuntu-vsftp-add-user.html","excerpt":"","text":"先修改/etc/vsftpd.conf去掉一下行注释。#local_enable=YES和#write_enable=YES。然后执行一下命令。 123sudo useradd h2ero -d &#x2F;home&#x2F;sudo passwd h2erosudo service vsftpd restart 参考:How to setup vsftpd FTP on Ubuntu Linux","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"}],"tags":[{"name":"vsftpd ubuntu ftp","slug":"vsftpd-ubuntu-ftp","permalink":"http://example.com/tags/vsftpd-ubuntu-ftp/"}]},{"title":"web安全","slug":"2012/2012-08-02-hack-website","date":"2012-08-01T16:00:00.000Z","updated":"2021-03-08T07:20:35.571Z","comments":true,"path":"/2012/2012-08-02-hack-website.html","link":"","permalink":"http://example.com/2012/2012-08-02-hack-website.html","excerpt":"","text":"###常用查找### dede查看/data/mysqli_error_trace.inc /data/mysql_error_trace.inc文件查找关键词index.php,login.php dede版本/data/admin/ver.txt","categories":[{"name":"hack","slug":"hack","permalink":"http://example.com/categories/hack/"}],"tags":[]},{"title":"拾遗","slug":"2012/2012-07-29-php-tip","date":"2012-07-28T16:00:00.000Z","updated":"2021-03-08T07:20:35.537Z","comments":true,"path":"/2012/2012-07-29-php-tip.html","link":"","permalink":"http://example.com/2012/2012-07-29-php-tip.html","excerpt":"","text":"strip_tags除了用于过滤不要的标签也可用于截取html后过滤掉未闭合的tag javascript html_strip 这样实现 123456function strip(html)&#123; var tmp &#x3D; document.createElement(&quot;DIV&quot;); tmp.innerHTML &#x3D; html; return tmp.textContent||tmp.innerText;&#125; 匹配url正则表达式 在线正则表达式测试工具 1(https?|ftp|telnet):\\&#x2F;\\&#x2F;((?:[a-z0-9@:.-]|%[0-9A-F]&#123;2&#125;)&#123;3,&#125;)(?::(\\d+))?((?:\\&#x2F;(?:[a-z0-9-._~!$&amp;&#39;()*+,;&#x3D;:@]|%[0-9A-F]&#123;2&#125;)*)*)(?:\\?((?:[a-z0-9-._~!$&amp;&#39;()*+,;&#x3D;:\\&#x2F;?@]|%[0-9A-F]&#123;2&#125;)*))?(?:#((?:[a-z0-9-._~!$&amp;&#39;()*+,;&#x3D;:\\&#x2F;?@]|%[0-9A-F]&#123;2&#125;)*))? 12345678910111213&lt;?php &#x2F;&#x2F;带www和http的生成链接 function text2url($text)&#123; $pattern&#x3D;&quot;&#x2F;((?:https?):\\&#x2F;\\&#x2F;)?((?:[a-z0-9@:.-]|%[0-9A-F]&#123;2&#125;)&#123;3,&#125;)(?::(\\d+))?((?:\\&#x2F;(?:[a-z0-9-._~!$&amp;&#39;()*+,;&#x3D;:@]|%[0-9A-F]&#123;2&#125;)*)*)(?:\\?((?:[a-z0-9-._~!$&amp;&#39;()*+,;&#x3D;:\\&#x2F;?@]|%[0-9A-F]&#123;2&#125;)*))?(?:#((?:[a-z0-9-._~!$&amp;&#39;()*+,;&#x3D;:\\&#x2F;?@]|%[0-9A-F]&#123;2&#125;)*))?&#x2F;iS&quot;; preg_match_all($pattern, $text, $matches); foreach ($matches[0] as $url)&#123; if($url)&#123; $search[]&#x3D;$url; $replace[]&#x3D;&#39;&lt;a target&#x3D;&quot;_blank&quot; href&#x3D;http:&#x2F;&#x2F;&#39;.str_replace(&#39;http:&#x2F;&#x2F;&#39;,&#39;&#39;,$url).&#39;&gt;&#39;.$url.&#39;&lt;&#x2F;a&gt;&#39;; &#125; &#125; return str_replace($search, $replace, $text); &#125;","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"}],"tags":[{"name":"php javascript","slug":"php-javascript","permalink":"http://example.com/tags/php-javascript/"}]},{"title":"正则表达式《精通正则表达式》笔记","slug":"2012/2012-07-06-regx","date":"2012-07-05T16:00:00.000Z","updated":"2021-03-08T07:20:35.492Z","comments":true,"path":"/2012/2012-07-06-regx.html","link":"","permalink":"http://example.com/2012/2012-07-06-regx.html","excerpt":"","text":"###概念### 正则(regex): 元字符+普通字符 字符组(Character Class): [abc.?] .?等需要转义的字符可以以字符组方式匹配 字符组都是匹配一个字符 g[.?] 并不会匹配 g.? 字符组元字符(Character-class Metacharacter): [^0-5a-z] 匹配大小写[Ss]qr 匹配HTML TAG &lt;H[1-5]&gt; ^不包含 [a|b]和(a|b)不同,前者|只是一个字符,后者则是”或” 单词分界(Word Boundaries)元字符序列(Metasequences): &lt;\\word word\\&gt; 匹配单词word开头的和word结尾的 \\b单词分界 \\bcat\\b 括号及反向引用(Parentheses and Backreferences): (abc)\\1 \\1开始引用 多个括号从左至右 php 使用引用需要转义，即 preg_match(&#39;/(cat)\\\\1/&#39;,$str,$res) 环视(lookaround): 环视和\\b ^ $等一样只是匹配特定的位置。 肯定顺序环视(lookahead): (?=h2ero)love you 从左至右 肯定逆序环视: (?&lt;=h2ero)lover you 从右至左 分隔123456789为123.456.789,可以是preg_replace(&#39;/(?&lt;=\\d)(?=(\\d\\d\\d)+$)/&#39;,&#39;.&#39;,&#39;123456789&#39;);也可以是preg_replace(&#39;/(?=\\d)(?&lt;=(\\d\\d\\d)+$)/&#39;,&#39;.&#39;,&#39;123456789&#39;);两个环视的先后顺序不重要。只要在相同位置匹配即可。 否定顺序环视: (?!h2ero)love you 从左至右 否定逆序环视: (?&lt;!h2ero)lover you 从右至左 ###拾遗### ^cat$ 以字符阅读 第一个c开头 第二个a 第三个t结尾 而不是单词cat ^$ 匹配空行 &quot;[^&quot;]*&quot; 匹配[]内的字符串 ###PHP中的正则### 单引号转移\\表示一个\\所以\\\\才表示一个\\ 模式修饰符 i 忽略大小写 m 增强的行锚模式 s 点号通配模式 x 宽松排列和注释模式 u 以UTF-8读取正则表达式和目标字符 X 启用PCRE额外功能 e 将replacement作为PHP代码 $metric=preg_replace(‘/(-?\\d+(?:.\\d+)?)/e’,’floor(($1-32)*5/9+0.5)’,$subject); S 启用PCRE的study优化尝试 U 交换和?的匹配优先含义 A 将整个匹配尝试锚定在起始位置 D $只能匹配锚定在起始位置 preg_match中的RPEG_OFFSET_CAPTURE由于获取每次匹配的偏移量。preg_match_all中的PREG_SET_ORDER每次匹配集中保存。如果要设置多个参数用|连接。","categories":[{"name":"note","slug":"note","permalink":"http://example.com/categories/note/"}],"tags":[]},{"title":"换种写部落格的方式啦。","slug":"2012/2012-07-06-h2ero-new-blog-new-life","date":"2012-07-05T16:00:00.000Z","updated":"2021-03-08T07:20:35.439Z","comments":true,"path":"/2012/2012-07-06-h2ero-new-blog-new-life.html","link":"","permalink":"http://example.com/2012/2012-07-06-h2ero-new-blog-new-life.html","excerpt":"","text":"换下写部落格的方式，前段时间看了看markdown的语法。而换这种方式一切又要归咎于学习Git开始。也算这学期的收获吧。一来以前就开始用github开始记自己的一些笔记，二来用不惯wordpress主要还是在排版上，而markdown确实很舒服，对于我这种天生就不会排版的人太适用了。以前给某某发的E-mail那叫一个乱字。github全免费，以后多做笔记了。折腾这个主题比较烦暂时不考虑兼容其他浏览器了，毕竟firefox才是最爱。（最后还是换做Luke的主题去了。）","categories":[{"name":"self","slug":"self","permalink":"http://example.com/categories/self/"}],"tags":[]},{"title":"IE6 min-height hack 实现","slug":"2012/2012-05-06-ie-min-height-css-hack","date":"2012-05-05T16:00:00.000Z","updated":"2021-03-08T07:20:35.388Z","comments":true,"path":"/2012/2012-05-06-ie-min-height-css-hack.html","link":"","permalink":"http://example.com/2012/2012-05-06-ie-min-height-css-hack.html","excerpt":"","text":"css用expression利用js判断设置。 12345selector &#123; min-height:500px; height:auto !important; height:500px;&#125; 来源:http://www.dustindiaz.com/min-height-fast-hack/","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"codeigniter 获取域名","slug":"2011/2011-12-17-codeigniter-get-domain","date":"2011-12-16T16:00:00.000Z","updated":"2021-03-08T07:17:23.629Z","comments":true,"path":"/2011/2011-12-17-codeigniter-get-domain.html","link":"","permalink":"http://example.com/2011/2011-12-17-codeigniter-get-domain.html","excerpt":"","text":"人懒直接找的网上的，设置cookie的时候需要用到，添加下面的函数到url_helper.php中即可 12345678910111213141516&lt;?php&#x2F;** * Get domain * * Return the domain name only based on the &quot;base_url&quot; item from your config file. * * @access public * @return string *&#x2F; function getDomain()&#123; $CI &#x3D;&amp; get_instance(); return preg_replace(&quot;&#x2F;^[\\w]&#123;2,6&#125;:\\&#x2F;\\&#x2F;([\\w\\d\\.\\-]+).*$&#x2F;&quot;,&quot;$1&quot;, $CI-&gt;config-&gt;slash_item(&#39;base_url&#39;));&#125;?&gt;","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"}],"tags":[{"name":"codeigniter","slug":"codeigniter","permalink":"http://example.com/tags/codeigniter/"}]},{"title":"IE6下PNG背景图片透明","slug":"2011/2011-07-15-ie-png-opacity","date":"2011-07-14T16:00:00.000Z","updated":"2021-03-08T07:17:23.581Z","comments":true,"path":"/2011/2011-07-15-ie-png-opacity.html","link":"","permalink":"http://example.com/2011/2011-07-15-ie-png-opacity.html","excerpt":"","text":"12345678#h1&#123; width: 500px; height: 250px; background: url(“images&#x2F;oa.png”); _filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src&#x3D;’style&#x2F;images&#x2F;oa.png’); &#x2F;* IE6 *&#x2F; _ background-image: none; &#x2F;* IE6 *&#x2F;&#125;","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"IE6","slug":"IE6","permalink":"http://example.com/tags/IE6/"}]},{"title":"dedecms模板标签中运行php代码","slug":"2011/2011-04-23-DedeCMS-Run-PHP","date":"2011-04-22T16:00:00.000Z","updated":"2021-03-08T07:17:23.539Z","comments":true,"path":"/2011/2011-04-23-DedeCMS-Run-PHP.html","link":"","permalink":"http://example.com/2011/2011-04-23-DedeCMS-Run-PHP.html","excerpt":"","text":"大清早爬起来看了看《松药店的儿子们》，然后想弄弄网站，把头像网站给升级为dedecms5.7去了，图片集多了一个描述的编辑框，以前都没有用那个，都是在摘要里面写的描述，现在有了就想用，可是有个问题就是摘要和描述要同时判断下然后在输出，无奈，找了半天的资料终于给解决了。 dedecms使用php： 1234567891011121314&lt;?php&#123;dede:field name&#x3D;&#39;array&#39; runphp&#x3D;&#39;yes&#39;&#125;if (@me[&#39;body&#39;]&#x3D;&#x3D;&#39;&#39;)@me&#x3D;@me[&#39;description&#39;];else @me&#x3D;@me[&#39;body&#39;];&#123;&#x2F;dede:field&#125;&#x2F;&#x2F;其中的＠me为输出的内容，不能直接echo，比如判断有短标题输出短标题，没有则输出完整的标题，&#123;dede:field name&#x3D;&#39;array&#39; runphp&#x3D;&#39;yes&#39;&#125;if (@me[&#39;shorttitle&#39;]&#x3D;&#x3D;&#39;&#39;)@me&#x3D;@me[&#39;title&#39;];else @me&#x3D;@me[&#39;shorttitle&#39;];&#123;&#x2F;dede:field&#125;?&gt; 一看就能明白，找这例子写就行了，","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"}],"tags":[{"name":"dedecms","slug":"dedecms","permalink":"http://example.com/tags/dedecms/"}]},{"title":"vim命令拾遗","slug":"2011/2011-04-12-vim-tip","date":"2011-04-12T16:00:00.000Z","updated":"2021-03-08T07:16:47.718Z","comments":true,"path":"/2011/2011-04-12-vim-tip.html","link":"","permalink":"http://example.com/2011/2011-04-12-vim-tip.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253H M L 移动光标到屏幕的上&#x2F;中&#x2F;下* 读取光标处的字符串 移动到再次出现的地方 # 为反向| 移动列+&#x2F;- 移动到下&#x2F;上N行非空白字符前(&#x2F;）移动到上&#x2F;下一个句子Ctrl+u&#x2F;d 上下翻页 相当于pagedown pageupCtrl+f&#x2F;b 下上一屏Ctrl+i&#x2F;o 跳转到较早&#x2F;较晚的地方，:marks 列出所有的标记m&#123;a-zA-Z&#125; 用标记 &#123;a-zA-Z&#125; 记录当前位置&#96;&#123;a-z&#125; 至当前文件中的标记 &#123;a-z&#125;&#96;&#123;A-Z&#125; 至任何文件中的标记 &#123;A-Z&#125;&#96;&#123;0-9&#125; 至 Vim 上次退出的位置&#96;&#96; 至上次跳转之前的位置&#96;&quot; 至上次编辑此文件的位置&#96;[ 至上次被操作或放置的文本的开始&#96;] 至上次被操作或放置的文本的结尾&#96;&lt; 至 (前次) 可视区域的开始&#96;&gt; 至 (前次) 可视区域的结尾&#96;. 至当前文件最后被改动的位置d 删除 dd dw de(不包括空格) d$ d^ d2as “aw”一个单词（a word）、”as”一个句子（a sentence）、”ap”一个段落（a paragraph）i 插入 6if esc 插入6个f，css中常用U 撤销所有Ctrl+R 撤销撤销的cw 改变单词部分或者全部c$&#x2F;^改变行尾或行首% 匹配()&#123;&#125;[]等等: (%这个文件替换)s&#x2F;replaced&#x2F;replaced（&#x2F;g全行替换&#x2F;c询问用户替换）:#,#s&#x2F;old&#x2F;new&#x2F;g (两行中间替换)Ctrl+N&#x2F;P 关键词自动补全 前提输入过的Ctrl+g 显示文件所在位置，和光标所在位置w 保存 #,#w filename 保存部分行r 读取文件进来set xxx 设置 xxx 选项 如 set ic &#x2F;set hls isq&#x2F; q? 显示搜索命令历史的窗口C-z fg或者:sh exit 切换到shellguw 将光标所在的单词变为小写guw 将光标所在的单词变为小写gUw 将光标所在的单词变为大写guu 光标所在的行所有字符变为小写gUU 光标所在的行所有字符变为大写g~~ 光标所在的行所有字符大小写反向转换:1,$!sort 将文件内的所有内容排序ga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）Shift-k 查找光标所在命令或函数的 man 帮助q: 显示命令行命令历史的窗口:help 帮助gR gr 替换保持布局&lt;&lt; &gt;&gt; 左右移动&gt;3j 下面三行右移动V以行开始高亮gv高亮上次高亮的","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"}]},{"title":"grub rescue Ubuntu开机问题","slug":"2011/2011-04-13-ubuntu-grub-rescue","date":"2011-04-12T16:00:00.000Z","updated":"2021-03-08T07:27:39.523Z","comments":true,"path":"/2011/2011-04-13-ubuntu-grub-rescue.html","link":"","permalink":"http://example.com/2011/2011-04-13-ubuntu-grub-rescue.html","excerpt":"","text":"昨天晚上格式化了两个分区，今天早晨起来然后Ubuntu1就罢工了，直接显示grub rescue看到grub就知道是引导出错了，拿出刻录的Ubuntu的cd在网上查了半天，基本都给解决了，不过以前哪个开机启动画面的分辨率又给恢复为以前的样子了，郁闷。 原因：格式化分区后，分区的h0,x x变了，找不到引导文件 解决方法： 1234567891011121314grub rescue&gt;ls#先list出所有的分区 如hd(0,7)等grub rescue&gt;ls hd(0,7)&#x2F;boot&#x2F;grub#在循环查看&#x2F;grub所在的分区grub rescue&gt;set root&#x3D;hd(0,7)#hd(0,7)为你ls grub是能查看到目录里面的文件是的hd(x,x)grub rescue&gt;set prefix&#x3D;hd(0,7)&#x2F;boot&#x2F;grubgrub rescue&gt;insmod &#x2F;boot&#x2F;grub&#x2F;normal.modgrub rescue&gt;normal#然后就进入系统了#Alt+Ctrl+t 调出终端$update-grub$grub-install &#x2F;dev&#x2F;sda6#sda6是你grub所在的分区可以在系统管理-磁盘工具 里面查看","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"}],"tags":[]},{"title":"Ubuntu等Linux系统文件目录作用","slug":"2011/2011-04-05-linux-directory","date":"2011-04-04T16:00:00.000Z","updated":"2021-03-08T07:20:57.676Z","comments":true,"path":"/2011/2011-04-05-linux-directory.html","link":"","permalink":"http://example.com/2011/2011-04-05-linux-directory.html","excerpt":"","text":"123456789101112131415161718192021222324&#x2F;bin 二进制可执行命令&#x2F;dev 设备特殊文件&#x2F;etc 系统管理和配置文件&#x2F;etc&#x2F;rc.d 启动的配置文件和脚本&#x2F;home 用户主目录的基点，比如用户user的主目录就是&#x2F;home&#x2F;user，可以用~user表示&#x2F;lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件&#x2F;sbin 系统管理命令，这里存放的是系统管理员使用的管理程序&#x2F;tmp 公用的临时文件存储点&#x2F;root 系统管理员的主目录（呵呵，特权阶级）&#x2F;mnt 系统提供这个目录是让用户临时挂载其他的文件系统。&#x2F;lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里&#x2F;proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。&#x2F;var 某些大文件的溢出区，比方说各种服务的日志文件&#x2F;usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：&#x2F;usr&#x2F;X11R6 存放X window的目录&#x2F;usr&#x2F;bin 众多的应用程序&#x2F;usr&#x2F;sbin 超级用户的一些管理程序&#x2F;usr&#x2F;doc linux文档&#x2F;usr&#x2F;include linux下开发和编译应用程序所需要的头文件&#x2F;usr&#x2F;lib 常用的动态链接库和软件包的配置文件&#x2F;usr&#x2F;man 帮助文档&#x2F;usr&#x2F;src 源代码，linux内核的源代码就放在&#x2F;usr&#x2F;src&#x2F;linux里&#x2F;usr&#x2F;local&#x2F;bin 本地增加的命令&#x2F;usr&#x2F;local&#x2F;lib 本地增加的库","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"}],"tags":[]},{"title":"php对css格式化和压缩","slug":"2011/2011-02-26-php-compress-css","date":"2011-02-25T16:00:00.000Z","updated":"2021-03-08T07:31:48.556Z","comments":true,"path":"/2011/2011-02-26-php-compress-css.html","link":"","permalink":"http://example.com/2011/2011-02-26-php-compress-css.html","excerpt":"","text":"今天在csdn看到有人问这个问题，于是答了下，结果发现答错了，囧~，下来自己写了下，不知不觉就花了3个小时才解决，哎谁叫俺还是个新手拉，不过学到了很多东西，大致格式化为这样 12345body&#123;font-size:12px;font-weight:bold;&#125;.nav ul.user&#123;float:right;margin:15px 5px 0 0;font-weight:bold;&#125;.nav ul.user li&#123;color:#000;font-weight:normal;&#125;.nav ul.user li a&#123;color:#000;padding:0 6px;&#125;.nav ul.user #vName&#123;font-weight:bold;color:#000;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?php&#x2F;** 思路：* &#123;&#125;里面的进行替换* 再对外边的进行替换* @Date 2011-2-26* @Author h2ero* Email 122750707@qq.com* Blog blog.h2ero.cn*&#x2F;$str&#x3D;&lt;&lt;body&#123;font-size:12px;font-weight:bold;&#125;.nav ul.user&#123;float:right;margin:15px 5px 0 0;font-weight:bold;&#125;.nav ul.user li&#123;color:#000;font-weight:normal;&#125;.nav ul.user li a&#123;color:#000;padding:0 6px;&#125;.nav ul.user #vName&#123;font-weight:bold;color:#000;&#125;.nav ul.user input.btn&#123;margin:0 3px -5px 0;&#125;eof;function replaceblank($s)&#123;$s&#x3D;$s[1];$search&#x3D;array(&#39;&#x2F;([\\r\\n])[\\s]+&#x2F;&#39;);$replace&#x3D;array(&#39;&#39;);$result&#x3D;preg_replace($search,$replace,$s);$result&#x3D;&quot;&#123;&quot;.&quot;$result&quot;.&quot;&#125;&quot;;return $result;&#125;$pattern&#x3D;&#39;&#x2F;\\&#123;(.*?)\\&#125;&#x2F;is&#39;;$str&#x3D;preg_replace_callback($pattern,replaceblank,$str);&#x2F;&#x2F;先删除&#123;&#125;的空格和换行$str&#x3D;preg_replace(&#39;&#x2F;\\r\\n&#x2F;&#39;,&#39;\\\\1&#39;,$str);&#x2F;&#x2F;去除&#123;&#125;外边的换行,因为可能有多个所以删了再添加下$replace&#x3D;&quot;\\\\1&#125;&quot;.chr(13);$str&#x3D;preg_replace(&#39;&#x2F;&#125;&#x2F;&#39;,$replace,$str);&#x2F;&#x2F;在&#125;后添加换行$pattern&#x3D;&#39;&#x2F;(.*?)[\\r\\n]&#x2F;is&#39;;preg_match_all($pattern,$str,$result);&#x2F;&#x2F;逐行读出在去掉空格换行for($i&#x3D;0;$i &#123;$result[0][$i]&#x3D;trim($result[0][$i]);$resultstring.&#x3D;$result[0][$i].chr(13);&#x2F;&#x2F;再添加换行这儿不添加换行就等于压缩了&#125;print_r($resultstring);?&gt;","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"}],"tags":[{"name":"css compression","slug":"css-compression","permalink":"http://example.com/tags/css-compression/"}]}],"categories":[{"name":"wiki","slug":"wiki","permalink":"http://example.com/categories/wiki/"},{"name":"plugin","slug":"plugin","permalink":"http://example.com/categories/plugin/"},{"name":"mac","slug":"mac","permalink":"http://example.com/categories/mac/"},{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"hack","slug":"hack","permalink":"http://example.com/categories/hack/"},{"name":"note","slug":"note","permalink":"http://example.com/categories/note/"},{"name":"self","slug":"self","permalink":"http://example.com/categories/self/"},{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"Youtube GoogleAnalytics","slug":"Youtube-GoogleAnalytics","permalink":"http://example.com/tags/Youtube-GoogleAnalytics/"},{"name":"search","slug":"search","permalink":"http://example.com/tags/search/"},{"name":"netbens jVi plugin","slug":"netbens-jVi-plugin","permalink":"http://example.com/tags/netbens-jVi-plugin/"},{"name":"Postfix Mac SMTP","slug":"Postfix-Mac-SMTP","permalink":"http://example.com/tags/Postfix-Mac-SMTP/"},{"name":"fuelphp php framework","slug":"fuelphp-php-framework","permalink":"http://example.com/tags/fuelphp-php-framework/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"vim","slug":"vim","permalink":"http://example.com/tags/vim/"},{"name":"shell terminator","slug":"shell-terminator","permalink":"http://example.com/tags/shell-terminator/"},{"name":"vsftpd ubuntu ftp","slug":"vsftpd-ubuntu-ftp","permalink":"http://example.com/tags/vsftpd-ubuntu-ftp/"},{"name":"php javascript","slug":"php-javascript","permalink":"http://example.com/tags/php-javascript/"},{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"},{"name":"codeigniter","slug":"codeigniter","permalink":"http://example.com/tags/codeigniter/"},{"name":"IE6","slug":"IE6","permalink":"http://example.com/tags/IE6/"},{"name":"dedecms","slug":"dedecms","permalink":"http://example.com/tags/dedecms/"},{"name":"css compression","slug":"css-compression","permalink":"http://example.com/tags/css-compression/"}]}